#Flask App and Define Routes (app.py)
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255), nullable=False)
    price = db.Column(db.Float, nullable=False)

    def __repr__(self):
        return f'<Product {self.name}>'

@app.route('/products', methods=['GET'])
def get_products():
    products = Product.query.all()
    products_list = [{'id': product.id, 'name': product.name, 'description': product.description, 'price': product.price} for product in products]
    return jsonify(products_list)

@app.route('/products', methods=['POST'])
def create_product():
    data = request.json
    name = data.get('name')
    description = data.get('description')
    price = data.get('price')

    if not name or not description or not price:
        return jsonify({'error': 'Missing required fields'}), 400

    new_product = Product(name=name, description=description, price=price)
    db.session.add(new_product)
    db.session.commit()

    return jsonify({'message': 'Product created successfully'}), 201

if __name__ == '__main__':
    app.run(debug=True)
# Define Database Model
from app import db

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255), nullable=False)
    price = db.Column(db.Float, nullable=False)

    def __repr__(self):
        return f'<Product {self.name}>'
//The Flask app is initialized and configured to use SQLite as the database.
//A Product model is defined in models.py with fields for id, name, description, and price.
//Two routes are implemented in app.py:
//products (GET): Retrieves all products from the database and returns them as JSON.
//products (POST): Accepts product details in JSON format, validates the input, creates a new product instance, and saves it to the database.
//Error handling is implemented for missing required fields in the POST request.
pip install flask sqlalchemy //Install FLask and SQLalchemy
python app.py //Running FLask App
